// Mocks generated by Mockito 5.0.16 from annotations
// in smpark/test/list_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;
import 'dart:ui' as _i8;

import 'package:location/location.dart' as _i7;
import 'package:location_platform_interface/location_platform_interface.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:smpark/api/service/service_service.dart' as _i5;
import 'package:smpark/src/providers/GeoSearch.dart' as _i3;
import 'package:smpark/src/providers/list_provider.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeObjectParkWrapper_0 extends _i1.Fake
    implements _i2.ObjectParkWrapper {}

class _FakeGeoSearch_1 extends _i1.Fake implements _i3.GeoSearch {}

class _FakeLocationData_2 extends _i1.Fake implements _i4.LocationData {}

/// A class which mocks [ServiceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockServiceService extends _i1.Mock implements _i5.ServiceService {
  MockServiceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.ObjectParkWrapper> findServiceByFilter(
          double? latitud, double? longitude) =>
      (super.noSuchMethod(
              Invocation.method(#findServiceByFilter, [latitud, longitude]),
              returnValue: Future<_i2.ObjectParkWrapper>.value(
                  _FakeObjectParkWrapper_0()))
          as _i6.Future<_i2.ObjectParkWrapper>);
  @override
  _i6.Future<_i3.GeoSearch> findCordsByDesc(
          String? desc, double? latitud, double? longitude) =>
      (super.noSuchMethod(
              Invocation.method(#findCordsByDesc, [desc, latitud, longitude]),
              returnValue: Future<_i3.GeoSearch>.value(_FakeGeoSearch_1()))
          as _i6.Future<_i3.GeoSearch>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Location].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocation extends _i1.Mock implements _i7.Location {
  MockLocation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<_i4.LocationData> get onLocationChanged =>
      (super.noSuchMethod(Invocation.getter(#onLocationChanged),
              returnValue: Stream<_i4.LocationData>.empty())
          as _i6.Stream<_i4.LocationData>);
  @override
  _i6.Future<bool> changeSettings(
          {_i4.LocationAccuracy? accuracy = _i4.LocationAccuracy.high,
          int? interval = 1000,
          double? distanceFilter = 0.0}) =>
      (super.noSuchMethod(
          Invocation.method(#changeSettings, [], {
            #accuracy: accuracy,
            #interval: interval,
            #distanceFilter: distanceFilter
          }),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> isBackgroundModeEnabled() =>
      (super.noSuchMethod(Invocation.method(#isBackgroundModeEnabled, []),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> enableBackgroundMode({bool? enable = true}) =>
      (super.noSuchMethod(
          Invocation.method(#enableBackgroundMode, [], {#enable: enable}),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<_i4.LocationData> getLocation() => (super.noSuchMethod(
          Invocation.method(#getLocation, []),
          returnValue: Future<_i4.LocationData>.value(_FakeLocationData_2()))
      as _i6.Future<_i4.LocationData>);
  @override
  _i6.Future<_i4.PermissionStatus> hasPermission() => (super.noSuchMethod(
          Invocation.method(#hasPermission, []),
          returnValue:
              Future<_i4.PermissionStatus>.value(_i4.PermissionStatus.granted))
      as _i6.Future<_i4.PermissionStatus>);
  @override
  _i6.Future<_i4.PermissionStatus> requestPermission() => (super.noSuchMethod(
          Invocation.method(#requestPermission, []),
          returnValue:
              Future<_i4.PermissionStatus>.value(_i4.PermissionStatus.granted))
      as _i6.Future<_i4.PermissionStatus>);
  @override
  _i6.Future<bool> serviceEnabled() =>
      (super.noSuchMethod(Invocation.method(#serviceEnabled, []),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> requestService() =>
      (super.noSuchMethod(Invocation.method(#requestService, []),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<_i4.AndroidNotificationData?> changeNotificationOptions(
          {String? channelName,
          String? title,
          String? iconName,
          String? subtitle,
          String? description,
          _i8.Color? color,
          bool? onTapBringToFront}) =>
      (super.noSuchMethod(
              Invocation.method(#changeNotificationOptions, [], {
                #channelName: channelName,
                #title: title,
                #iconName: iconName,
                #subtitle: subtitle,
                #description: description,
                #color: color,
                #onTapBringToFront: onTapBringToFront
              }),
              returnValue: Future<_i4.AndroidNotificationData?>.value())
          as _i6.Future<_i4.AndroidNotificationData?>);
  @override
  String toString() => super.toString();
}
